@use "sass:map";
@use "sass:string";
@use "colors" as c;

// Emit CSS variables from a theme map
@mixin emit-theme-vars($theme-map) {
  @each $k, $v in $theme-map {
    --#{$k}: #{$v};
  }
}

// Convenience: read a CSS var in SCSS
@function theme($key) {
  @return string.unquote("var(--#{$key})");
}

/* Default theme + prepare UA color-scheme hint */
:root {
  @include emit-theme-vars(map.get(c.$themes, c.$default-theme));
  color-scheme: light dark;
}

// Automatic selection: if the user explicitly prefers a light theme â€” switch :root to light
@media (prefers-color-scheme: light) {
  :root {
    @include emit-theme-vars(map.get(c.$themes, light));
  }
}

/* Generate [data-theme="name"] blocks for each theme */
@each $name, $map in c.$themes {
  [data-theme="#{$name}"] {
    @include emit-theme-vars($map);
  }
}

/* Optional: smoother switch */
.theme-transition * {
  transition: background-color .2s ease, color .2s ease, border-color .2s ease;
}
